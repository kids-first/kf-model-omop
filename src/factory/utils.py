import os
import subprocess

from omop import create_omop
from utils.db import drop_db
from config import config as config_dict
from config import MODELS_FILE_PATH, ROOT_DIR


def auto_gen_models(refresh_schema, model_filepath=MODELS_FILE_PATH):
    """
    Autogenerate the OMOP SQLAlchemy models

    Create a temp db, download latest OMOP boostrap postgres scripts, run
    postgres scripts to create OMOP tables, constraints, etc.

    Use sqlacodegen to generate models from temp db. Then apply customizations
    to the models (i.e. add Kids First IDs, etc)
    """
    print('\nAuto-generating models ...\n')
    # Create temp db with omop tables
    create_omop(config_name='temp', refresh=refresh_schema, from_schema=True)

    # Auto generate models from temp db
    generate_models_from_db(model_filepath)

    # Drop temp db
    drop_db(config_name='temp')

    # Inject customizations into the models Python module
    customize_models(model_filepath)

    print(f'\nComplete - generated models: {model_filepath}')


def generate_models_from_db(model_filepath, config_name='temp'):
    """
    Use sqlacodegen to generate SQLAlchemy models Python module from Postgres
    """
    config = config_dict.get(config_name)

    cmd = (f'sqlacodegen {config.SQLALCHEMY_DATABASE_URI} '
           f'--outfile {model_filepath}')
    output = subprocess.run(cmd, shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)
    output_str = output.stdout.decode('utf-8')

    print(output_str)

    if output.returncode != 0:
        raise Exception(
            f'Error in auto_gen_models!\n\n{output_str}')


def customize_models(model_filepath):
    """
    Modify models.py generated by generate_models_from_db with customizations

    Make all models inherit Base and ModelMixins
    Fix bug ConceptClas -> ConceptClass
    Add module docstring
    """
    # Find/replace things
    with open(model_filepath, 'r') as models_file:
        models_txt = models_file.read()
        models_txt = models_txt.replace('ConceptClas', 'ConceptClass')
        models_txt = models_txt.replace('(Base)', '(Base, ModelMixins)')

    # Insert docstring and imports
    template_path = os.path.join(ROOT_DIR, 'factory', 'model_template.txt')
    with open(template_path, 'r') as template_file:
        customized_models_code = template_file.read()
        customized_models_code = customized_models_code.format(
            models=models_txt)

    # Update models.py
    with open(model_filepath, 'w') as models_file:
        models_file.write(customized_models_code)
